/* Copyright (c) 2017 FIRST. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification,
* are permitted (subject to the limitations in the disclaimer below) provided that
* the following conditions are met:
*
* Redistributions of source code must retain the above copyright notice, this list
* of conditions and the following disclaimer.
*
* Redistributions in binary form must reproduce the above copyright notice, this
* list of conditions and the following disclaimer in the documentation and/or
* other materials provided with the distribution.
*
* Neither the name of FIRST nor the names of its contributors may be used to endorse or
* promote products derived from this software without specific prior written permission.
*
* NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
* LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import java.lang.Math.*;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="Two Driver OpMode", group="Linear Opmode")
public class LightSpeedTeleOp2Drivers extends LinearOpMode /* Copyright (c) 2017 FIRST. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification,
* are permitted (subject to the limitations in the disclaimer below) provided that
* the following conditions are met:
*
* Redistributions of source code must retain the above copyright notice, this list
* of conditions and the following disclaimer.
*
* Redistributions in binary form must reproduce the above copyright notice, this
* list of conditions and the following disclaimer in the documentation and/or
* other materials provided with the distribution.
*
* Neither the name of FIRST nor the names of its contributors may be used to endorse or
* promote products derived from this software without specific prior written permission.
*
* NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
* LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package org.firstinspires.ftc.teamcode;

       import com.qualcomm.robotcore.eventloop.opmode.Disabled;
       import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
       import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
       import com.qualcomm.robotcore.hardware.DcMotor;
       import com.qualcomm.robotcore.hardware.DcMotorSimple;
       import java.lang.Math.*;
       import com.qualcomm.robotcore.hardware.HardwareMap;
       import com.qualcomm.robotcore.hardware.Servo;
       import com.qualcomm.robotcore.util.ElapsedTime;
       import com.qualcomm.robotcore.util.Range;

@TeleOp(name="Two Driver OpMode", group="Linear Opmode")
public class LightSpeedTeleOp2Drivers extends LinearOpMode {
   private static DcMotor leftFront,leftBack,rightFront,rightBack;
   private static double leftJoystickX,leftJoystickY,rightJoystickX,rightJoystickY;
   private static double leftFrontPower,leftBackPower,rightBackPower,rightFrontPower;

   @Overide
   public void init (){
       leftFront = hardwareMap.dcMotor.get("frontLeft");
       leftBack = hardwareMap.dcMotor.get("backLeft");
       rightFront = hardwareMap.dcMotor.get("frontRight");
       leftBack = hardwareMap.dcMotor.get("backRight");

       leftFront.setDirection(DcMotorSimple.Direction.REVERSE);
       rightFront.setDirection(DcMotorSimple.Direction.REVERSE);
   }

   @Overide
   public void loop (){
       leftJoystickX = gamepad1.left_stick_x;
       leftJoystickY = gamepad1.left_stick_y;
       rightJoystickX = gamepad1.right_stick_x;
       rightJoystickY = gamepad1.right_stick_y;


       leftFrontPower = leftJoystickY + rightJoystickX - leftJoystickX;
       rightFrontPower =  leftJoystickY -  rightJoystickX + leftJoystickX;
       leftBackPower =  leftJoystickY + rightJoystickX + leftJoystickX;
       rightBackPower =  leftJoystickY -  rightJoystickX - leftJoystickX;

       double[] wheelPower = {Math.abs(leftFrontPower),Math.abs(leftBackPower),Math.abs(rightFrontPower),Math.abs(rightBackPower)};
       Arrays.sort(wheelPower);
       double largestInput = wheelPower[3];
       if (largestInput > 1) {
           leftFrontPower /= largestInput;
           leftBackPower /= largestInput;
           rightFrontPower /= largestInput;
           rightBackPower /= largestInput;
       }
       leftFront.setPower(leftFrontPower)
       leftBack.setPower(leftBackPower)
       rightFront.setPower(rightFrontPower)
       rightBack.setPower(RightBackPower)
   }


